# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Check for new release
        id: check
        run: |
          # Use GitHub's API to check for a new release
          LATEST_RELEASE=$(curl --silent "https://api.github.com/repos/sabnzbd/sabnzbd/releases/latest" | jq -r .tag_name)
          echo "::set-output name=version::${LATEST_RELEASE}"
          echo "${{ steps.check.outputs.version }}" is latest release
      
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Read latest processed release
        id: read
        run: |
          if [ CURRENT_RELEASE=$(curl --silent "https://api.github.com/repos/thorsom/test1/releases/latest" | jq -r .tag_name) ]; then
            echo "::set-output name=processed::${CURRENT_RELEASE}"
          else
            echo "::set-output name=processed::"
          fi
          echo "${{ steps.check.outputs.processed }}" is local release

      - name: Create new release
        if: steps.check.outputs.version != steps.read.outputs.processed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Update the file with the new version
          # echo "${{ steps.check.outputs.version }}" > latest_release.txt
          # echo "${{ steps.check.outputs.version }}" is latest release
          # echo "${{ steps.check.outputs.processed }}" is local release
          
          # Create a new release in your repository
          gh release create ${{ steps.check.outputs.version }}

